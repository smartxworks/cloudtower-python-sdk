# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class UploadResourceType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CLOUDTOWER_APPLICATION_PACKAGE = "CLOUDTOWER_APPLICATION_PACKAGE"
    CLOUDTOWER_K8S_APP_PACKAGE = "CLOUDTOWER_K8S_APP_PACKAGE"
    CLUSTER_IMAGE = "CLUSTER_IMAGE"
    CLUSTER_IMAGE_META = "CLUSTER_IMAGE_META"
    CONTENT_LIBRARY_IMAGE = "CONTENT_LIBRARY_IMAGE"
    ELF_IMAGE = "ELF_IMAGE"
    EVEROUTE_PACKAGE = "EVEROUTE_PACKAGE"
    HOST_PLUGIN_PACKAGE = "HOST_PLUGIN_PACKAGE"
    MONITOR_IMAGE = "MONITOR_IMAGE"
    OVF = "OVF"
    SVT_IMAGE = "SVT_IMAGE"
    VM_VOLUME_QCOW2 = "VM_VOLUME_QCOW2"
    VM_VOLUME_RAW = "VM_VOLUME_RAW"
    VM_VOLUME_VMDK = "VM_VOLUME_VMDK"

    allowable_values = [CLOUDTOWER_APPLICATION_PACKAGE, CLOUDTOWER_K8S_APP_PACKAGE, CLUSTER_IMAGE, CLUSTER_IMAGE_META, CONTENT_LIBRARY_IMAGE, ELF_IMAGE, EVEROUTE_PACKAGE, HOST_PLUGIN_PACKAGE, MONITOR_IMAGE, OVF, SVT_IMAGE, VM_VOLUME_QCOW2, VM_VOLUME_RAW, VM_VOLUME_VMDK]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, **kwargs):  # noqa: E501
        """UploadResourceType - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadResourceType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UploadResourceType):
            return True

        return self.to_dict() != other.to_dict()
