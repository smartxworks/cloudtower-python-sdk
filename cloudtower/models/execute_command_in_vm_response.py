# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class ExecuteCommandInVmResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'err_truncated': 'bool',
        'out_truncated': 'bool',
        'signal': 'float',
        'stderr': 'str',
        'stdout': 'str',
        'return_code': 'float',
        'vm_id': 'str'
    }

    attribute_map = {
        'err_truncated': 'err_truncated',
        'out_truncated': 'out_truncated',
        'signal': 'signal',
        'stderr': 'stderr',
        'stdout': 'stdout',
        'return_code': 'return_code',
        'vm_id': 'vm_id'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """ExecuteCommandInVmResponse - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self._err_truncated = None
        self._out_truncated = None
        self._signal = None
        self._stderr = None
        self._stdout = None
        self._return_code = None
        self._vm_id = None
        self.discriminator = None

        self.err_truncated = kwargs.get("err_truncated", None)
        self.out_truncated = kwargs.get("out_truncated", None)
        self.signal = kwargs.get("signal", None)
        self.stderr = kwargs.get("stderr", None)
        self.stdout = kwargs.get("stdout", None)
        self.return_code = kwargs.get("return_code", None)
        if "vm_id" in kwargs:
            self.vm_id = kwargs["vm_id"]

    @property
    def err_truncated(self):
        """Gets the err_truncated of this ExecuteCommandInVmResponse.  # noqa: E501


        :return: The err_truncated of this ExecuteCommandInVmResponse.  # noqa: E501
        :rtype: bool
        """
        return self._err_truncated

    @err_truncated.setter
    def err_truncated(self, err_truncated):
        """Sets the err_truncated of this ExecuteCommandInVmResponse.


        :param err_truncated: The err_truncated of this ExecuteCommandInVmResponse.  # noqa: E501
        :type err_truncated: bool
        """

        self._err_truncated = err_truncated

    @property
    def out_truncated(self):
        """Gets the out_truncated of this ExecuteCommandInVmResponse.  # noqa: E501


        :return: The out_truncated of this ExecuteCommandInVmResponse.  # noqa: E501
        :rtype: bool
        """
        return self._out_truncated

    @out_truncated.setter
    def out_truncated(self, out_truncated):
        """Sets the out_truncated of this ExecuteCommandInVmResponse.


        :param out_truncated: The out_truncated of this ExecuteCommandInVmResponse.  # noqa: E501
        :type out_truncated: bool
        """

        self._out_truncated = out_truncated

    @property
    def signal(self):
        """Gets the signal of this ExecuteCommandInVmResponse.  # noqa: E501


        :return: The signal of this ExecuteCommandInVmResponse.  # noqa: E501
        :rtype: float
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this ExecuteCommandInVmResponse.


        :param signal: The signal of this ExecuteCommandInVmResponse.  # noqa: E501
        :type signal: float
        """

        self._signal = signal

    @property
    def stderr(self):
        """Gets the stderr of this ExecuteCommandInVmResponse.  # noqa: E501


        :return: The stderr of this ExecuteCommandInVmResponse.  # noqa: E501
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this ExecuteCommandInVmResponse.


        :param stderr: The stderr of this ExecuteCommandInVmResponse.  # noqa: E501
        :type stderr: str
        """

        self._stderr = stderr

    @property
    def stdout(self):
        """Gets the stdout of this ExecuteCommandInVmResponse.  # noqa: E501


        :return: The stdout of this ExecuteCommandInVmResponse.  # noqa: E501
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this ExecuteCommandInVmResponse.


        :param stdout: The stdout of this ExecuteCommandInVmResponse.  # noqa: E501
        :type stdout: str
        """

        self._stdout = stdout

    @property
    def return_code(self):
        """Gets the return_code of this ExecuteCommandInVmResponse.  # noqa: E501


        :return: The return_code of this ExecuteCommandInVmResponse.  # noqa: E501
        :rtype: float
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this ExecuteCommandInVmResponse.


        :param return_code: The return_code of this ExecuteCommandInVmResponse.  # noqa: E501
        :type return_code: float
        """

        self._return_code = return_code

    @property
    def vm_id(self):
        """Gets the vm_id of this ExecuteCommandInVmResponse.  # noqa: E501


        :return: The vm_id of this ExecuteCommandInVmResponse.  # noqa: E501
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this ExecuteCommandInVmResponse.


        :param vm_id: The vm_id of this ExecuteCommandInVmResponse.  # noqa: E501
        :type vm_id: str
        """
        if self.local_vars_configuration.client_side_validation and vm_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vm_id`, must not be `None`")  # noqa: E501

        self._vm_id = vm_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecuteCommandInVmResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExecuteCommandInVmResponse):
            return True

        return self.to_dict() != other.to_dict()
