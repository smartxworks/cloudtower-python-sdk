# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class ExecuteCommandInVmParamsData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timeout': 'float',
        'capture_output': 'bool',
        'envs': 'list[str]',
        'args': 'list[str]',
        'path': 'str'
    }

    attribute_map = {
        'timeout': 'timeout',
        'capture_output': 'capture_output',
        'envs': 'envs',
        'args': 'args',
        'path': 'path'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """ExecuteCommandInVmParamsData - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self._timeout = None
        self._capture_output = None
        self._envs = None
        self._args = None
        self._path = None
        self.discriminator = None

        if "timeout" in kwargs:
            self.timeout = kwargs["timeout"]
        if "capture_output" in kwargs:
            self.capture_output = kwargs["capture_output"]
        if "envs" in kwargs:
            self.envs = kwargs["envs"]
        if "args" in kwargs:
            self.args = kwargs["args"]
        if "path" in kwargs:
            self.path = kwargs["path"]

    @property
    def timeout(self):
        """Gets the timeout of this ExecuteCommandInVmParamsData.  # noqa: E501


        :return: The timeout of this ExecuteCommandInVmParamsData.  # noqa: E501
        :rtype: float
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ExecuteCommandInVmParamsData.


        :param timeout: The timeout of this ExecuteCommandInVmParamsData.  # noqa: E501
        :type timeout: float
        """

        self._timeout = timeout

    @property
    def capture_output(self):
        """Gets the capture_output of this ExecuteCommandInVmParamsData.  # noqa: E501


        :return: The capture_output of this ExecuteCommandInVmParamsData.  # noqa: E501
        :rtype: bool
        """
        return self._capture_output

    @capture_output.setter
    def capture_output(self, capture_output):
        """Sets the capture_output of this ExecuteCommandInVmParamsData.


        :param capture_output: The capture_output of this ExecuteCommandInVmParamsData.  # noqa: E501
        :type capture_output: bool
        """

        self._capture_output = capture_output

    @property
    def envs(self):
        """Gets the envs of this ExecuteCommandInVmParamsData.  # noqa: E501


        :return: The envs of this ExecuteCommandInVmParamsData.  # noqa: E501
        :rtype: list[str]
        """
        return self._envs

    @envs.setter
    def envs(self, envs):
        """Sets the envs of this ExecuteCommandInVmParamsData.


        :param envs: The envs of this ExecuteCommandInVmParamsData.  # noqa: E501
        :type envs: list[str]
        """

        self._envs = envs

    @property
    def args(self):
        """Gets the args of this ExecuteCommandInVmParamsData.  # noqa: E501


        :return: The args of this ExecuteCommandInVmParamsData.  # noqa: E501
        :rtype: list[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this ExecuteCommandInVmParamsData.


        :param args: The args of this ExecuteCommandInVmParamsData.  # noqa: E501
        :type args: list[str]
        """

        self._args = args

    @property
    def path(self):
        """Gets the path of this ExecuteCommandInVmParamsData.  # noqa: E501


        :return: The path of this ExecuteCommandInVmParamsData.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ExecuteCommandInVmParamsData.


        :param path: The path of this ExecuteCommandInVmParamsData.  # noqa: E501
        :type path: str
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecuteCommandInVmParamsData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExecuteCommandInVmParamsData):
            return True

        return self.to_dict() != other.to_dict()
