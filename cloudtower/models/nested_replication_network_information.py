# coding: utf-8
try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from cloudtower.configuration import Configuration


class NestedReplicationNetworkInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_local_id': 'str',
        'cluster_name': 'str',
        'network_ids': 'list[str]',
        'vds_name': 'str',
        'vlan_id': 'int',
        'vlan_local_id': 'str',
        'vlan_mode_type': 'VlanModeType',
        'vlan_name': 'str'
    }

    attribute_map = {
        'cluster_local_id': 'cluster_local_id',
        'cluster_name': 'cluster_name',
        'network_ids': 'network_ids',
        'vds_name': 'vds_name',
        'vlan_id': 'vlan_id',
        'vlan_local_id': 'vlan_local_id',
        'vlan_mode_type': 'vlan_mode_type',
        'vlan_name': 'vlan_name'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """NestedReplicationNetworkInformation - a model defined in OpenAPI"""  # noqa: E501
        self.local_vars_configuration = kwargs.get("local_vars_configuration", Configuration.get_default_copy())

        self._cluster_local_id = None
        self._cluster_name = None
        self._network_ids = None
        self._vds_name = None
        self._vlan_id = None
        self._vlan_local_id = None
        self._vlan_mode_type = None
        self._vlan_name = None
        self.discriminator = None

        if "cluster_local_id" in kwargs:
            self.cluster_local_id = kwargs["cluster_local_id"]
        if "cluster_name" in kwargs:
            self.cluster_name = kwargs["cluster_name"]
        self.network_ids = kwargs.get("network_ids", None)
        self.vds_name = kwargs.get("vds_name", None)
        self.vlan_id = kwargs.get("vlan_id", None)
        if "vlan_local_id" in kwargs:
            self.vlan_local_id = kwargs["vlan_local_id"]
        if "vlan_mode_type" in kwargs:
            self.vlan_mode_type = kwargs["vlan_mode_type"]
        if "vlan_name" in kwargs:
            self.vlan_name = kwargs["vlan_name"]

    @property
    def cluster_local_id(self):
        """Gets the cluster_local_id of this NestedReplicationNetworkInformation.  # noqa: E501


        :return: The cluster_local_id of this NestedReplicationNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._cluster_local_id

    @cluster_local_id.setter
    def cluster_local_id(self, cluster_local_id):
        """Sets the cluster_local_id of this NestedReplicationNetworkInformation.


        :param cluster_local_id: The cluster_local_id of this NestedReplicationNetworkInformation.  # noqa: E501
        :type cluster_local_id: str
        """
        if self.local_vars_configuration.client_side_validation and cluster_local_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_local_id`, must not be `None`")  # noqa: E501

        self._cluster_local_id = cluster_local_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this NestedReplicationNetworkInformation.  # noqa: E501


        :return: The cluster_name of this NestedReplicationNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this NestedReplicationNetworkInformation.


        :param cluster_name: The cluster_name of this NestedReplicationNetworkInformation.  # noqa: E501
        :type cluster_name: str
        """
        if self.local_vars_configuration.client_side_validation and cluster_name is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")  # noqa: E501

        self._cluster_name = cluster_name

    @property
    def network_ids(self):
        """Gets the network_ids of this NestedReplicationNetworkInformation.  # noqa: E501


        :return: The network_ids of this NestedReplicationNetworkInformation.  # noqa: E501
        :rtype: list[str]
        """
        return self._network_ids

    @network_ids.setter
    def network_ids(self, network_ids):
        """Sets the network_ids of this NestedReplicationNetworkInformation.


        :param network_ids: The network_ids of this NestedReplicationNetworkInformation.  # noqa: E501
        :type network_ids: list[str]
        """

        self._network_ids = network_ids

    @property
    def vds_name(self):
        """Gets the vds_name of this NestedReplicationNetworkInformation.  # noqa: E501


        :return: The vds_name of this NestedReplicationNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._vds_name

    @vds_name.setter
    def vds_name(self, vds_name):
        """Sets the vds_name of this NestedReplicationNetworkInformation.


        :param vds_name: The vds_name of this NestedReplicationNetworkInformation.  # noqa: E501
        :type vds_name: str
        """

        self._vds_name = vds_name

    @property
    def vlan_id(self):
        """Gets the vlan_id of this NestedReplicationNetworkInformation.  # noqa: E501


        :return: The vlan_id of this NestedReplicationNetworkInformation.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this NestedReplicationNetworkInformation.


        :param vlan_id: The vlan_id of this NestedReplicationNetworkInformation.  # noqa: E501
        :type vlan_id: int
        """

        self._vlan_id = vlan_id

    @property
    def vlan_local_id(self):
        """Gets the vlan_local_id of this NestedReplicationNetworkInformation.  # noqa: E501


        :return: The vlan_local_id of this NestedReplicationNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._vlan_local_id

    @vlan_local_id.setter
    def vlan_local_id(self, vlan_local_id):
        """Sets the vlan_local_id of this NestedReplicationNetworkInformation.


        :param vlan_local_id: The vlan_local_id of this NestedReplicationNetworkInformation.  # noqa: E501
        :type vlan_local_id: str
        """
        if self.local_vars_configuration.client_side_validation and vlan_local_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vlan_local_id`, must not be `None`")  # noqa: E501

        self._vlan_local_id = vlan_local_id

    @property
    def vlan_mode_type(self):
        """Gets the vlan_mode_type of this NestedReplicationNetworkInformation.  # noqa: E501


        :return: The vlan_mode_type of this NestedReplicationNetworkInformation.  # noqa: E501
        :rtype: VlanModeType
        """
        return self._vlan_mode_type

    @vlan_mode_type.setter
    def vlan_mode_type(self, vlan_mode_type):
        """Sets the vlan_mode_type of this NestedReplicationNetworkInformation.


        :param vlan_mode_type: The vlan_mode_type of this NestedReplicationNetworkInformation.  # noqa: E501
        :type vlan_mode_type: VlanModeType
        """
        if self.local_vars_configuration.client_side_validation and vlan_mode_type is None:  # noqa: E501
            raise ValueError("Invalid value for `vlan_mode_type`, must not be `None`")  # noqa: E501

        self._vlan_mode_type = vlan_mode_type

    @property
    def vlan_name(self):
        """Gets the vlan_name of this NestedReplicationNetworkInformation.  # noqa: E501


        :return: The vlan_name of this NestedReplicationNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._vlan_name

    @vlan_name.setter
    def vlan_name(self, vlan_name):
        """Sets the vlan_name of this NestedReplicationNetworkInformation.


        :param vlan_name: The vlan_name of this NestedReplicationNetworkInformation.  # noqa: E501
        :type vlan_name: str
        """
        if self.local_vars_configuration.client_side_validation and vlan_name is None:  # noqa: E501
            raise ValueError("Invalid value for `vlan_name`, must not be `None`")  # noqa: E501

        self._vlan_name = vlan_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NestedReplicationNetworkInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NestedReplicationNetworkInformation):
            return True

        return self.to_dict() != other.to_dict()
